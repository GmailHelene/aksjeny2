"""Initial migration

Revision ID: 769884445837
Revises: 
Create Date: 2025-08-09 14:03:10.715740

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '769884445837'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('watchlist_stock_watchlist_id_fkey', 'watchlist_stock', type_='foreignkey')
    op.drop_table('portfolio_stock')
    op.drop_table('watchlist_stock')
    op.drop_table('watchlist')
    op.drop_table('portfolio')
    with op.batch_alter_table('notification_settings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('language', sa.String(length=8), nullable=False))
        batch_op.add_column(sa.Column('display_mode', sa.String(length=16), nullable=False))
        batch_op.add_column(sa.Column('number_format', sa.String(length=16), nullable=False))
        batch_op.add_column(sa.Column('dashboard_widgets', sa.Text(), nullable=True))

    with op.batch_alter_table('portfolios', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('price_alerts', schema=None) as batch_op:
        batch_op.alter_column('alert_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=10),
               existing_nullable=False)
        batch_op.drop_index(batch_op.f('idx_price_alerts_symbol'))
        batch_op.drop_index(batch_op.f('idx_price_alerts_user_active'))
        batch_op.create_index(batch_op.f('ix_price_alerts_symbol'), ['symbol'], unique=False)
        batch_op.create_index(batch_op.f('ix_price_alerts_ticker'), ['ticker'], unique=False)

    with op.batch_alter_table('stock_tips', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('stripe_customer_id',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=128),
               existing_nullable=True)
        batch_op.alter_column('two_factor_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('is_locked',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('login_count',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.drop_column('password')
        batch_op.drop_column('subscription_id')
        batch_op.drop_column('subscription_status')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('subscription_status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('subscription_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.alter_column('login_count',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('is_locked',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
        batch_op.alter_column('two_factor_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('stripe_customer_id',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)

    with op.batch_alter_table('stock_tips', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('price_alerts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_price_alerts_ticker'))
        batch_op.drop_index(batch_op.f('ix_price_alerts_symbol'))
        batch_op.create_index(batch_op.f('idx_price_alerts_user_active'), ['user_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('idx_price_alerts_symbol'), ['symbol'], unique=False)
        batch_op.alter_column('alert_type',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)

    with op.batch_alter_table('portfolios', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)

    with op.batch_alter_table('notification_settings', schema=None) as batch_op:
        batch_op.drop_column('dashboard_widgets')
        batch_op.drop_column('number_format')
        batch_op.drop_column('display_mode')
        batch_op.drop_column('language')

    op.create_table('portfolio',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('portfolio_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='portfolio_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='portfolio_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('watchlist_stock',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('watchlist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ticker', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('added_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['watchlist_id'], ['watchlist.id'], name=op.f('watchlist_stock_watchlist_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('watchlist_stock_pkey'))
    )
    op.create_table('watchlist',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('watchlist_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('watchlist_pkey'))
    )
    op.create_table('portfolio_stock',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('portfolio_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ticker', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('purchase_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('purchase_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolio.id'], name=op.f('portfolio_stock_portfolio_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('portfolio_stock_pkey'))
    )
    # ### end Alembic commands ###
