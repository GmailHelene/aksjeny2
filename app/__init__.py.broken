from flask import Flask, render_template, request, jsonify, url_for, get_flashed_messages, g
from .config import config
from .extensions import db, login_manager, cache, socketio
from .utils.market_open import is_oslo_bors_open, is_global_markets_open
from flask_login import current_user
import logging
import os
from datetime import datetime
import atexit
import signal
import sys
            elif url_prefix:
                app.register_blueprint(blueprint, url_prefix=url_prefix)
            else:
                app.register_blueprint(blueprint)
            blueprints_registered.append(blueprint_name)
            app.logger.info(f"✅ Registered blueprint: {blueprint_name}")
        except ImportError as e:
            app.logger.warning(f"Could not import {blueprint_name}: {e}")
        except Exception as e:
            app.logger.error(f"Error registering {blueprint_name}: {e}")from flask_wtf.csrf import CSRFProtect, CSRFError
import os
import time
from dotenv import load_dotenv
from datetime import datetime, timedelta
from flask_migrate import Migrate
import logging
import psutil

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

try:
    logger.info("✅ psutil module is available.")
except ImportError:
    logger.error("❌ psutil module is missing.")

try:
    import redis
    logger.info("✅ Redis module is available.")
except ImportError:
    logger.error("❌ Redis module is missing.")

def create_app(config_name='default'):
    """Production-ready app factory with Railway compatibility"""
    app = Flask(__name__)
    
    # Set up logging
    logging.basicConfig(level=logging.INFO)
    app.logger.setLevel(logging.INFO)
    
    try:
        # Load config
        app.config.from_object(config[config_name])
        app.logger.info(f"✅ App created in {config_name} mode")
        
        # Basic app configuration
        configure_app(app, config[config_name])
        
        # Register custom unauthorized handler for Flask-Login
        from flask import request, redirect, url_for
        def aksjeradar_unauthorized():
            app.logger.warning(f"[UNAUTHORIZED HANDLER] endpoint={request.endpoint} url={request.url}")
            # Redirect to subscription for main/index routes
            if request.endpoint in ('main.index', 'main', 'main.landing', 'main.home', 'main.demo'):
                app.logger.warning("[UNAUTHORIZED HANDLER] Redirecting to subscription")
                return redirect(url_for('main.subscription'))
            # Otherwise, default to login
            app.logger.warning("[UNAUTHORIZED HANDLER] Redirecting to /login")
            return redirect(url_for('main.login', next=request.url))
        
        login_manager.unauthorized_handler(aksjeradar_unauthorized)
        app.logger.info('Custom unauthorized handler registered for Flask-Login')
        
        # Initialize core extensions
        init_core_extensions(app, config[config_name])
        
        # Import database models early to ensure user_loader is registered
        try:
            from .models import User, Portfolio, Watchlist
            from .models.user import load_user
            app.logger.info("✅ Database models imported successfully")
        except Exception as e:
            app.logger.error(f"❌ Error importing database models: {e}")
            # Continue without models for now
        
        # Register blueprints
        register_blueprints(app)
        
        # Add context processors and error handlers
        setup_app_handlers(app)
        
        # Initialize database for production
        if config_name == 'production':
            setup_production_database(app)
        else:
            setup_lazy_database_init(app)
        
        # Register custom Jinja2 filters
        try:
            from .utils.filters import register_filters
            register_filters(app)
        except ImportError:
            app.logger.warning("Could not import custom filters")
        
        # Register Norwegian formatting filters
        try:
            from .utils.norwegian_formatter import register_norwegian_filters
            register_norwegian_filters(app)
        except ImportError:
            app.logger.warning("Could not import Norwegian filters")
        
        # Debug: Print all registered endpoints
        app.logger.info("Registered endpoints:")
        for rule in app.url_map.iter_rules():
            app.logger.info(f"Endpoint: {rule.endpoint} -> {rule}")
        app.logger.info("✅ App initialization complete")
        return app
        
    except Exception as e:
        app.logger.error(f"❌ Critical error during app creation: {e}")
        raise

def register_blueprints(app):
    """Register all blueprints"""
    blueprints_registered = []
    
    # Core blueprints that must be registered
    try:
        from .routes.main import main
        app.register_blueprint(main)
        blueprints_registered.append('main')
        
        # Explicitly import and register portfolio blueprint
        from .routes.portfolio import portfolio
        app.register_blueprint(portfolio, url_prefix='/portfolio')
        blueprints_registered.append('portfolio')
        
        # Register Stripe blueprint
        try:
            from .routes.stripe_routes import stripe_bp
            app.register_blueprint(stripe_bp)
            blueprints_registered.append('stripe')
            app.logger.info("✅ Registered Stripe blueprint")
        except ImportError as e:
            app.logger.warning(f"Could not import Stripe blueprint: {e}")
    except ImportError as e:
        app.logger.error(f"Failed to import main or portfolio blueprint: {e}")
        raise
    
    # Other blueprints with proper relative imports
    blueprint_configs = [
        ('.routes.stocks', 'stocks', '/stocks'),
        ('.routes.api', 'api', None),
        ('.routes.analysis', 'analysis', '/analysis'),
        ('.routes.pricing', 'pricing_bp', '/pricing'),
        ('.routes.news', 'news_bp', '/news'),
        ('.routes.health', 'health', '/health'),
        ('.routes.admin', 'admin', '/admin'),
        ('.routes.features', 'features', '/features'),
        ('.routes.blog', 'blog', '/blog'),
        ('.routes.investment_guides', 'investment_guides', '/investment-guides'),
        ('.routes.notifications', 'notifications_bp', '/notifications'),
        ('.routes.watchlist_advanced', 'watchlist_bp', '/watchlist'),
    ]
    
    for module_path, blueprint_name, url_prefix in blueprint_configs:
        try:
            module = __import__(module_path, fromlist=[blueprint_name], level=1, package=__name__)
            blueprint = getattr(module, blueprint_name)
            # Special case: stocks blueprint should be registered with no prefix (root)
            if blueprint_name == 'stocks':
                app.register_blueprint(blueprint)
            elif url_prefix:
                app.register_blueprint(blueprint, url_prefix=url_prefix)
            else:
                app.register_blueprint(blueprint)
            blueprints_registered.append(blueprint_name)
            app.logger.info(f"✅ Registered blueprint: {blueprint_name}")
        except ImportError as e:
            app.logger.warning(f"Could not import {blueprint_name}: {e}")
        except AttributeError as e:
            app.logger.warning(f"Blueprint {blueprint_name} not found in {module_path}: {e}")
        except Exception as e:
            app.logger.error(f"Error registering {blueprint_name}: {e}")
    
    app.logger.info(f"✅ Registered {len(blueprints_registered)} blueprints: {', '.join(blueprints_registered)}")
    
    # Register the realtime_api blueprint
    try:
        from .routes.realtime_api import realtime_api
        app.register_blueprint(realtime_api)
        blueprints_registered.append('realtime_api')
        app.logger.info("✅ Registered realtime_api blueprint")
    except ImportError as e:
        app.logger.warning(f"Could not import realtime_api blueprint: {e}")

def setup_production_database(app):
    """Setup database for production with proper error handling"""
    try:
        with app.app_context():
            # Create database tables if they don't exist
            db.create_all()
            app.logger.info("✅ Database tables created/verified")
            
            # Set up exempt users for production
            setup_exempt_users(app)
            
    except Exception as e:
        app.logger.error(f"❌ Production database setup failed: {e}")

def setup_exempt_users(app):
    """Set up exempt users for production"""
    try:
        from .models.user import User
        
        exempt_users = [
            {'email': 'helene721@gmail.com', 'username': 'helene721', 'password': 'aksjeradar2024'},
            {'email': 'tonjekit91@gmail.com', 'username': 'tonjekit91', 'password': 'aksjeradar2024'},
            {'email': 'helene@luxushair.com', 'username': 'helene_luxus', 'password': 'aksjeradar2024'},
            {'email': 'eiriktollan.berntsen@gmail.com', 'username': 'eirik_berntsen', 'password': 'aksjeradar2024'}
        ]
        
        for user_data in exempt_users:
            user = User.query.filter_by(email=user_data['email']).first()
            if not user:
                user = User(
                    email=user_data['email'],
                    username=user_data['username'],
                    subscription_type='premium',
                    is_admin=True,
                    trial_used=False
                )
                user.set_password(user_data['password'])
                db.session.add(user)
                
        db.session.commit()
        app.logger.info("✅ Exempt users configured")
        
    except Exception as e:
        app.logger.error(f"❌ Failed to set up exempt users: {e}")

def configure_app(app, config_obj):
    """Configure app settings and security headers"""
    # Database configuration - Railway compatibility
    database_url = os.getenv('DATABASE_URL', 'sqlite:///app.db')
    
    # Fix postgres:// to postgresql:// for Railway
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
    
    app.config['SQLALCHEMY_DATABASE_URI'] = database_url
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
        'pool_pre_ping': True,
        'pool_recycle': 300,
        'echo': os.getenv('SQL_ECHO', 'False').lower() == 'true'
    }
    
    # Security settings
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', os.urandom(24).hex())
    app.config['SESSION_COOKIE_SECURE'] = getattr(config_obj, 'SESSION_COOKIE_SECURE', False)
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
    app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=30)
    
    # Add EXEMPT_ENDPOINTS to app config - endpoints that should always be accessible
    app.config['EXEMPT_ENDPOINTS'] = {
        'main.login', 'main.register', 'main.logout', 'main.privacy', 'main.privacy_policy',
        'main.offline', 'main.offline_html', 'static', 'favicon',
        'main.service_worker', 'main.manifest', 'main.version', 'main.contact', 'main.contact_submit',
        'main.subscription', 'main.subscription_plans', 'main.payment_success', 'main.payment_cancel',
        'main.forgot_password', 'main.reset_password', 'main.demo',
        'stocks.index', 'stocks.search', 'analysis.index', 'main.referrals', 'main.send_referral',
        'pricing.pricing', 'pricing.index'
    }
    
    # Add security headers
    @app.after_request
    def add_security_headers(response):
        # Content type protection
        response.headers['X-Content-Type-Options'] = 'nosniff'
        
        # Clickjacking protection
        response.headers['X-Frame-Options'] = 'DENY'
        
        # XSS protection
        response.headers['X-XSS-Protection'] = '1; mode=block'
        
        # Content Security Policy
        csp = (
            "default-src 'self'; "
            "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://cdn.jsdelivr.net; "
            "style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; "
            "img-src 'self' data: https: *; "
            "font-src 'self' https: data:; "
            "connect-src 'self' https: wss:; "
            "frame-src 'self' https://js.stripe.com; "
            "object-src 'none'; "
            "base-uri 'self';"
        )
        response.headers['Content-Security-Policy'] = csp
        
        # Additional security headers
        response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
        response.headers['Permissions-Policy'] = 'camera=(), microphone=(), geolocation=()'
        
        return response

def init_core_extensions(app, config_obj):
    """Initialize only core extensions for faster startup"""
    # Core database and auth
    db.init_app(app)
    login_manager.init_app(app)
    
    # CSRF protection
    csrf = CSRFProtect()
    csrf.init_app(app)
    
    # Configure Flask-Login with secure cookie settings
    # Removed login_manager.login_view to allow custom access control and redirects
    login_manager.login_message = ''
    login_manager.login_message_category = 'info'
    login_manager.session_protection = 'strong'
    login_manager.remember_cookie_duration = timedelta(days=30)
    login_manager.remember_cookie_name = getattr(config_obj, 'REMEMBER_COOKIE_NAME', 'remember_token')
    login_manager.remember_cookie_httponly = getattr(config_obj, 'REMEMBER_COOKIE_HTTPONLY', True)

    # Set remember cookie secure flag for production
    login_manager.remember_cookie_secure = getattr(config_obj, 'REMEMBER_COOKIE_SECURE', False)

    login_manager.refresh_view = 'main.login'
    login_manager.needs_refresh_message = ''
    
    # Mail (lazy init)
    mail.init_app(app)
    
    # Database migrations
    migrate = Migrate(app, db)

def setup_lazy_database_init(app):
    """Setup lazy database initialization"""
    @app.before_request
    def init_database():
        """Initialize database models on first request"""
        # Only initialize once
        if hasattr(app, '_database_models_imported'):
            return
            
        try:
            # Import models here to ensure they're registered with SQLAlchemy
            from .models import User, Portfolio, Watchlist
            from .models.notifications import (
                Notification, PriceAlert, NotificationSettings, 
                AIModel, PredictionLog
            )
            # Ensure user_loader is imported and registered
            from .models.user import load_user
            app._database_models_imported = True
            app.logger.info("Database models imported successfully")
        except Exception as e:
            app.logger.error(f"Error importing database models: {e}")

def setup_app_handlers(app):
    """Setup context processors and error handlers"""
    @app.context_processor
    def utility_processor():
        from flask_login import current_user
        from flask import session, g
        from flask_wtf.csrf import generate_csrf
        
        try:
            from app.utils.access_control import get_trial_status
            trial_status = get_trial_status()
        except:
            trial_status = None
        
        # Make current_user and login status available globally
        login_status = {
            'current_user': current_user,
            'is_authenticated': current_user.is_authenticated if current_user else False,
            'user_email': current_user.email if current_user and current_user.is_authenticated else None,
            'user_name': current_user.username if current_user and current_user.is_authenticated else None,
            'datetime': datetime,
            'csrf_token': generate_csrf,
            'trial_status': trial_status
        }
        
        # Also set in g for template access
        g.current_user = current_user
        g.is_authenticated = current_user.is_authenticated if current_user else False
        
        return login_status
    
    @app.template_filter('now')
    def now_filter(format_string):
        """Template filter for current timestamp"""
        return datetime.now().strftime(format_string)
    
    # Add missing template filters
    @app.template_filter('format_currency')
    def format_currency(value):
        """Format currency values"""
        if value is None:
            return "N/A"
        try:
            return f"{float(value):,.2f} kr"
        except (ValueError, TypeError):
            return str(value)
    
    @app.template_filter('format_number')
    def format_number(value):
        """Format numbers with thousand separators"""
        if value is None:
            return "N/A"
        try:
            return f"{float(value):,.2f}"
        except (ValueError, TypeError):
            return str(value)
    
    @app.template_filter('format_percentage')
    def format_percentage(value):
        """Format percentage values"""
        if value is None:
            return "N/A"
        try:
            return f"{float(value):.2f}%"
        except (ValueError, TypeError):
            return str(value)
    
    @app.template_filter('format_date')
    def format_date(value, format='%d.%m.%Y'):
        """Format date values"""
        if value is None:
            return "N/A"
        try:
            if isinstance(value, str):
                # Try to parse string dates
                from datetime import datetime
                value = datetime.fromisoformat(value.replace('Z', '+00:00'))
            return value.strftime(format)
        except (ValueError, TypeError, AttributeError):
            return str(value)
    
    @app.template_filter('format_large_number')
    def format_large_number(value):
        """Format large numbers with K/M/B suffixes"""
        if value is None:
            return "N/A"
        try:
            value = float(value)
            if value >= 1_000_000_000:
                return f"{value/1_000_000_000:.1f}B"
            elif value >= 1_000_000:
                return f"{value/1_000_000:.1f}M"
            elif value >= 1_000:
                return f"{value/1_000:.1f}K"
            else:
                return f"{value:.0f}"
        except (ValueError, TypeError):
            return str(value)
    
    @app.template_filter('capitalize_first')
    def capitalize_first(value):
        """Capitalize first letter of string"""
        if not value:
            return ""
        return str(value).capitalize()
    
    @app.template_filter('truncate_words')
    def truncate_words(value, length=50):
        """Truncate text to specified number of characters"""
        if not value:
            return ""
        value = str(value)
        return value[:length] + "..." if len(value) > length else value
    
    # Add template context processors
    @app.context_processor
    def inject_common_vars():
        """Inject common variables into all templates"""
        return {
            'current_time': int(time.time()),
            'current_year': datetime.now().year,
            'current_date': datetime.now().strftime('%Y-%m-%d'),
            'current_language': 'no',
            'app_name': 'Aksjeradar',
            'app_version': '1.0.0'
        }
    
    @app.context_processor
    def inject_request_vars():
        """Inject request-specific variables"""
        return {
            'request': request,
            'url_for': url_for,
            'get_flashed_messages': get_flashed_messages
        }
    
    # Add error handlers
    @app.errorhandler(404)
    def not_found_error(error):
        """Handle 404 errors"""
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Endpoint ikke funnet'}), 404
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        """Handle 500 errors"""
        app.logger.error(f'Server Error: {error}')
        if request.path.startswith('/api/'):
            return jsonify({'error': 'Intern serverfeil'}), 500
        return render_template('errors/500.html'), 500
    
    @app.errorhandler(Exception)
    def handle_unexpected_error(error):
        """Handle unexpected errors"""
        app.logger.error(f'Unexpected error: {error}', exc_info=True)
        if request.path.startswith('/api/'):
            return jsonify({'error': 'En uventet feil oppstod'}), 500
        return render_template('errors/500.html'), 500
    
    # Add CSRF error handler
    @app.errorhandler(400)
    def handle_csrf_error(e):
        """Handle CSRF errors gracefully"""
        from flask import redirect, url_for
        
        # Check if this is a CSRF error
        if isinstance(e, CSRFError) or 'csrf' in str(e).lower():
            app.logger.warning(f'CSRF error: {str(e)}')
            
            # Redirect based on request path
            if 'checkout' in request.path:
                return redirect(url_for('main.subscription'))
            elif 'login' in request.path:
                return redirect(url_for('main.login'))
            else:
                return redirect(url_for('main.index'))
        
        # If not a CSRF error, return standard 400 page
        return render_template('errors/400.html'), 400
    
    # Add specific CSRF error handler  
    @app.errorhandler(CSRFError)
    def handle_csrf_error_specific(e):
        """Handle CSRFError specifically"""
        from flask import redirect, url_for
        
        app.logger.warning(f'CSRFError: {str(e)}')
        
        if 'checkout' in request.path:
            return redirect(url_for('main.subscription'))
        elif 'login' in request.path:
            return redirect(url_for('main.login'))
        else:
            return redirect(url_for('main.index'))
    
    @app.context_processor
    def inject_utils():
        """Make utility functions available in templates"""
        return dict(
            now=datetime.utcnow,
            datetime=datetime
        )
